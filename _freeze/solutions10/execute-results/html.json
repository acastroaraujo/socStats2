{
  "hash": "b9fb40822eba1605a2c003c64cc321d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Solutions 10\"\ncallout-appearance: simple\ncallout-icon: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Packages and Setup\"}\nlibrary(tidyverse)\nlibrary(panelr)\nlibrary(gapminder)\nlibrary(ggeffects)  \nlibrary(performance)\n\ntheme_set(theme_light(base_family = \"Crimson Text\"))\n```\n:::\n\n\n## Exercise\n\nThe `gapminder` dataset is as good as any to practice moving from *wide* to *long* format.\n\nI'm going to show you how to do this with `tidyverse` and with `panelr`, the later of which is much more intuitive.\n\n*Note. The `gapminder` dataset already comes in long format.*\n\n**`tidyverse`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## from long to wide\n\nglimpse(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n```\n\n\n:::\n\n```{.r .cell-code}\ngap_wide <- gapminder::gapminder |> \n  pivot_wider(\n    names_from = year, \n    values_from = c(lifeExp, gdpPercap, pop), \n    names_sep = \"\"\n  ) \n\nglimpse(gap_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 142\nColumns: 38\n$ country       <fct> \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentin…\n$ continent     <fct> Asia, Europe, Africa, Africa, Americas, Oceania, Europe,…\n$ lifeExp1952   <dbl> 28.801, 55.230, 43.077, 30.015, 62.485, 69.120, 66.800, …\n$ lifeExp1957   <dbl> 30.33200, 59.28000, 45.68500, 31.99900, 64.39900, 70.330…\n$ lifeExp1962   <dbl> 31.99700, 64.82000, 48.30300, 34.00000, 65.14200, 70.930…\n$ lifeExp1967   <dbl> 34.02000, 66.22000, 51.40700, 35.98500, 65.63400, 71.100…\n$ lifeExp1972   <dbl> 36.08800, 67.69000, 54.51800, 37.92800, 67.06500, 71.930…\n$ lifeExp1977   <dbl> 38.43800, 68.93000, 58.01400, 39.48300, 68.48100, 73.490…\n$ lifeExp1982   <dbl> 39.854, 70.420, 61.368, 39.942, 69.942, 74.740, 73.180, …\n$ lifeExp1987   <dbl> 40.822, 72.000, 65.799, 39.906, 70.774, 76.320, 74.940, …\n$ lifeExp1992   <dbl> 41.674, 71.581, 67.744, 40.647, 71.868, 77.560, 76.040, …\n$ lifeExp1997   <dbl> 41.763, 72.950, 69.152, 40.963, 73.275, 78.830, 77.510, …\n$ lifeExp2002   <dbl> 42.129, 75.651, 70.994, 41.003, 74.340, 80.370, 78.980, …\n$ lifeExp2007   <dbl> 43.828, 76.423, 72.301, 42.731, 75.320, 81.235, 79.829, …\n$ gdpPercap1952 <dbl> 779.4453, 1601.0561, 2449.0082, 3520.6103, 5911.3151, 10…\n$ gdpPercap1957 <dbl> 820.8530, 1942.2842, 3013.9760, 3827.9405, 6856.8562, 10…\n$ gdpPercap1962 <dbl> 853.1007, 2312.8890, 2550.8169, 4269.2767, 7133.1660, 12…\n$ gdpPercap1967 <dbl> 836.1971, 2760.1969, 3246.9918, 5522.7764, 8052.9530, 14…\n$ gdpPercap1972 <dbl> 739.9811, 3313.4222, 4182.6638, 5473.2880, 9443.0385, 16…\n$ gdpPercap1977 <dbl> 786.1134, 3533.0039, 4910.4168, 3008.6474, 10079.0267, 1…\n$ gdpPercap1982 <dbl> 978.0114, 3630.8807, 5745.1602, 2756.9537, 8997.8974, 19…\n$ gdpPercap1987 <dbl> 852.3959, 3738.9327, 5681.3585, 2430.2083, 9139.6714, 21…\n$ gdpPercap1992 <dbl> 649.3414, 2497.4379, 5023.2166, 2627.8457, 9308.4187, 23…\n$ gdpPercap1997 <dbl> 635.3414, 3193.0546, 4797.2951, 2277.1409, 10967.2820, 2…\n$ gdpPercap2002 <dbl> 726.7341, 4604.2117, 5288.0404, 2773.2873, 8797.6407, 30…\n$ gdpPercap2007 <dbl> 974.5803, 5937.0295, 6223.3675, 4797.2313, 12779.3796, 3…\n$ pop1952       <int> 8425333, 1282697, 9279525, 4232095, 17876956, 8691212, 6…\n$ pop1957       <int> 9240934, 1476505, 10270856, 4561361, 19610538, 9712569, …\n$ pop1962       <int> 10267083, 1728137, 11000948, 4826015, 21283783, 10794968…\n$ pop1967       <int> 11537966, 1984060, 12760499, 5247469, 22934225, 11872264…\n$ pop1972       <int> 13079460, 2263554, 14760787, 5894858, 24779799, 13177000…\n$ pop1977       <int> 14880372, 2509048, 17152804, 6162675, 26983828, 14074100…\n$ pop1982       <int> 12881816, 2780097, 20033753, 7016384, 29341374, 15184200…\n$ pop1987       <int> 13867957, 3075321, 23254956, 7874230, 31620918, 16257249…\n$ pop1992       <int> 16317921, 3326498, 26298373, 8735988, 33958947, 17481977…\n$ pop1997       <int> 22227415, 3428038, 29072015, 9875024, 36203463, 18565243…\n$ pop2002       <int> 25268405, 3508512, 31287142, 10866106, 38331121, 1954679…\n$ pop2007       <int> 31889923, 3600523, 33333216, 12420476, 40301927, 2043417…\n```\n\n\n:::\n\n```{.r .cell-code}\n## from wide to long\n\ngap_long <- gap_wide |> \n  pivot_longer(\n    cols = matches(\"\\\\d$\"),                    # good luck\n    names_to = c(\".value\", \"year\"),            # figuring this\n    names_pattern = \"([A-Za-z]*)(\\\\d+)\",       # out!!!\n    names_transform = list(year = as.integer)\n  )  \n\nglimpse(gap_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n```\n\n\n:::\n:::\n\n\n**`panelr`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngap_long_panelr <- gap_wide |> \n  long_panel(\n    id = \"country\",\n    wave = \"year\",\n    begin = 1952,\n    end = 2007\n  )\n\ngap_long_panelr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Panel data:    7,952 × 6\n# Entities:      country [142]\n# Wave variable: year [1952, 1953, 1954, ... (56 waves)]\n   country      year continent lifeExp gdpPercap     pop\n   <fct>       <dbl> <fct>       <dbl>     <dbl>   <int>\n 1 Afghanistan  1952 Asia         28.8      779. 8425333\n 2 Afghanistan  1953 Asia         NA         NA       NA\n 3 Afghanistan  1954 Asia         NA         NA       NA\n 4 Afghanistan  1955 Asia         NA         NA       NA\n 5 Afghanistan  1956 Asia         NA         NA       NA\n 6 Afghanistan  1957 Asia         30.3      821. 9240934\n 7 Afghanistan  1958 Asia         NA         NA       NA\n 8 Afghanistan  1959 Asia         NA         NA       NA\n 9 Afghanistan  1960 Asia         NA         NA       NA\n10 Afghanistan  1961 Asia         NA         NA       NA\n# ℹ 7,942 more rows\n```\n\n\n:::\n:::\n\n\n*Note that `panelr` has made the missing values explicit, which is something you may want (or not).*\n\nOnce you `gap_long_panelr` you'll notice that this object has an extra class called \"panel_data.\" The `widen_panel()` function understands this and can make the change to \"wide\" effortlessly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiden_panel(gap_long_panelr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 170\n   country     continent lifeExp_1952 gdpPercap_1952 pop_1952 lifeExp_1953\n   <fct>       <fct>            <dbl>          <dbl>    <int>        <dbl>\n 1 Afghanistan Asia              28.8           779.  8425333           NA\n 2 Albania     Europe            55.2          1601.  1282697           NA\n 3 Algeria     Africa            43.1          2449.  9279525           NA\n 4 Angola      Africa            30.0          3521.  4232095           NA\n 5 Argentina   Americas          62.5          5911. 17876956           NA\n 6 Australia   Oceania           69.1         10040.  8691212           NA\n 7 Austria     Europe            66.8          6137.  6927772           NA\n 8 Bahrain     Asia              50.9          9867.   120447           NA\n 9 Bangladesh  Asia              37.5           684. 46886859           NA\n10 Belgium     Europe            68            8343.  8730405           NA\n# ℹ 132 more rows\n# ℹ 164 more variables: gdpPercap_1953 <dbl>, pop_1953 <int>,\n#   lifeExp_1954 <dbl>, gdpPercap_1954 <dbl>, pop_1954 <int>,\n#   lifeExp_1955 <dbl>, gdpPercap_1955 <dbl>, pop_1955 <int>,\n#   lifeExp_1956 <dbl>, gdpPercap_1956 <dbl>, pop_1956 <int>,\n#   lifeExp_1957 <dbl>, gdpPercap_1957 <dbl>, pop_1957 <int>,\n#   lifeExp_1958 <dbl>, gdpPercap_1958 <dbl>, pop_1958 <int>, …\n```\n\n\n:::\n:::\n\n\nNote that there's a lot of columns with missing values. You'll have to drop them first with `drop_na()` if you don't want them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngap_long_panelr |> \n  tidyr::drop_na() |> \n  widen_panel()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 38\n   country     continent lifeExp_1952 gdpPercap_1952 pop_1952 lifeExp_1957\n   <fct>       <fct>            <dbl>          <dbl>    <int>        <dbl>\n 1 Afghanistan Asia              28.8           779.  8425333         30.3\n 2 Albania     Europe            55.2          1601.  1282697         59.3\n 3 Algeria     Africa            43.1          2449.  9279525         45.7\n 4 Angola      Africa            30.0          3521.  4232095         32.0\n 5 Argentina   Americas          62.5          5911. 17876956         64.4\n 6 Australia   Oceania           69.1         10040.  8691212         70.3\n 7 Austria     Europe            66.8          6137.  6927772         67.5\n 8 Bahrain     Asia              50.9          9867.   120447         53.8\n 9 Bangladesh  Asia              37.5           684. 46886859         39.3\n10 Belgium     Europe            68            8343.  8730405         69.2\n# ℹ 132 more rows\n# ℹ 32 more variables: gdpPercap_1957 <dbl>, pop_1957 <int>,\n#   lifeExp_1962 <dbl>, gdpPercap_1962 <dbl>, pop_1962 <int>,\n#   lifeExp_1967 <dbl>, gdpPercap_1967 <dbl>, pop_1967 <int>,\n#   lifeExp_1972 <dbl>, gdpPercap_1972 <dbl>, pop_1972 <int>,\n#   lifeExp_1977 <dbl>, gdpPercap_1977 <dbl>, pop_1977 <int>,\n#   lifeExp_1982 <dbl>, gdpPercap_1982 <dbl>, pop_1982 <int>, …\n```\n\n\n:::\n:::\n\n\n## Exercise\n\n::: callout-note\nSlide 33 contains a very simple visualization made using the `line_plot()` function.\n\nTry your best to make a similar graph for the `gapminder` dataset, with year on the x-axis and `lifeExp` on the y-axis for a random subset of 10 countries.\n\n*Use `ggplot2`, do not use `line_plot()`*\n:::\n\nThe trick to answering this question is to first figure out how to select a random subset of countries when the rows of `gapminder` don't represent countries but country-years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_list <- unique(gapminder$country)\n\ngapminder |> \n  filter(country %in% sample(country_list, 10)) |> \n  ggplot(aes(year, lifeExp, group = country)) +\n  geom_point(size = 1/2) +\n  geom_line(alpha = 1/2)\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nIf you want the lines distinguished by colors, you can do something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country %in% sample(country_list, 10)) |> \n  ggplot(aes(year, lifeExp, color = country)) +\n  geom_point(size = 1/2) +\n  geom_line(alpha = 1/2)\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n...or maybe by continent:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country %in% sample(country_list, 10)) |> \n  ggplot(aes(year, lifeExp, color = continent, group = country)) +\n  geom_point(size = 1/2) +\n  geom_line(alpha = 1/2)\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Exercise\n\nThe ICC is a summary statistic that only makes sense when you have data whose variance can be partitioned in terms of *within* and *between.*\n\nTwo typical situations:\n\n-   Clusters (e.g., \"students nested\" in classrooms)\n\n-   Repeated observations (e.g., observations \"nested in\" individuals).\n\nPanel data is case of the latter. In class we saw an example of a **multilevel model**, which extends typical regression models by adding a second error term.\n\nFor example:\n\n$$\n\\text{lwage}_{it} = \\beta_0 + \\beta_1 \\text{college}_i + \\alpha_i + \\epsilon_{it}\n$$\n\n\n::: {.cell}\n\n:::\n\n\nHow much of the variance is within and how much is between? We can get a simple answer to this question by examining the **intraclass correlation**, defined as:$$\\text{ICC} = \\frac{\\tau^2}{\\tau^2 + \\sigma^2}$$where $\\tau^2$ is the between-person variance and $\\sigma^2$ is the within-person variance.\n\n::: callout-note\nWhat is the ICC for `lifeExp`, `pop`, and `gdpPercap` in the `gapminder` dataset?\n:::\n\nThere are many ways to do this\n\n**Method 1 (full manual)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Steve's code\n\n# BETWEEN VARIANCE\nb_var <- gapminder |>\n  group_by(country) |>                            # do calculations separately for ids\n  summarize(mean_lifeExp = mean(lifeExp)) |>      # get each id's mean [lifeExp]\n  summarize(b_var = var(mean_lifeExp)) |>         # get variance of means\n  as.numeric()                                    # output as a number\n\nb_var\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 124.2174\n```\n\n\n:::\n\n```{.r .cell-code}\n# WITHIN VARIANCE\nw_var <- gapminder |>                             \n  group_by(country) |>                            # do calculations separately for ids\n  mutate(dev_lifeExp = lifeExp - mean(lifeExp)) |># create time devs from each id's mean\n  ungroup() |>                                    # calcs on whole data frame\n  summarize(w_var = var(dev_lifeExp)) |>          # get variance of deviations\n  as.numeric()                                    # output as number\n\nw_var\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 43.43659\n```\n\n\n:::\n\n```{.r .cell-code}\n## ICC\nb_var / (b_var + w_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7409153\n```\n\n\n:::\n:::\n\n\n**Method 2 (using OLS)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols <- lm(lifeExp ~ country, data = gapminder)\n1 - (var(ols$residuals) / var(gapminder$lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7396694\n```\n\n\n:::\n:::\n\n\n*Note. Here I took advantage of the fact that `var(gapminder$lifeExp)` is the sum of the between and within variance. If you're curious about this I encourage you to search for \"the law of total variance\" in probability theory.*\n\n**Method 3 (using `lmer`)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlm <- lmer(lifeExp ~ (1 | country), data = gapminder, REML = FALSE)\nperformance::icc(mlm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.716\n  Unadjusted ICC: 0.716\n```\n\n\n:::\n:::\n\n\n*Excuse me! The results are too different... what gives?*\n\n*The numbers differ a bit because `lmer()` \"shrinks\" the estimates of the means towards the population mean a bit (in exchange for better \"efficiency\"). This issue is outside the scope of this homework, but both results are OK!*\n\nIf you want some intuition of what this \"shrinkage\" business is all about, I recommend squinting at the following graph:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npred_ols <- broom::augment(ols, newdata = tibble(country = country_list))\n\ndf <- coefficients(mlm)$country |> \n  rownames_to_column(\"country\") |> \n  full_join(pred_ols)\n\ndf |> \n  rename(lm = \".fitted\", lmer = \"(Intercept)\") |> \n  mutate(diff = abs(lm - lmer)) |> \n  mutate(country = fct_reorder(country, diff)) |> \n  ggplot(aes(y = country)) + \n  geom_point(aes(x = lm, color = \"lm\"), size = 1/2) + \n  geom_point(aes(x = lmer, color = \"lmer\"), size = 1/2) + \n  labs(x = \"average lifeExp\", y = NULL)\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Exercise\n\n*Note. In case you didn't notice, this exercise was taken straight from Steve's `ldar` course materials.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"WageData\", package = \"panelr\")\n\nWageData <- WageData |> \n  mutate(\n    college = if_else(ed >= 16, 1L, 0L),  # college variable\n    t0 = t - 1                            # start time at 0\n  )\n\nmod1 <- lmer(lwage ~ college + t0 + (1 | id), REML = FALSE, data = WageData)\nmod2 <- lmer(lwage ~ college + t0 + (t0 | id), REML = FALSE, data = WageData)\nmod3 <- lmer(lwage ~ college + t0 + I(t0^2) + (t0 + I(t0^2) | id), REML = FALSE, \n             data = WageData, \n             ## I got this part from Stack Overflow, will update if something's wrong\n             control = lmerControl(optimizer = 'optimx', optCtrl = list(method = 'nlminb')))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: optimx\n```\n\n\n:::\n\n```{.r .cell-code}\n# compare BICs\nBIC(mod1, mod2, mod3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     df       BIC\nmod1  5 -1574.123\nmod2  7 -1930.822\nmod3 11 -1996.860\n```\n\n\n:::\n\n```{.r .cell-code}\n# get coef\nsummary(mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by maximum likelihood  ['lmerMod']\nFormula: lwage ~ college + t0 + (1 | id)\n   Data: WageData\n\n     AIC      BIC   logLik deviance df.resid \n -1605.8  -1574.1    807.9  -1615.8     4160 \n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-11.7145  -0.3543   0.0322   0.4068  12.6683 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept) 0.12694  0.3563  \n Residual             0.02356  0.1535  \nNumber of obs: 4165, groups:  id, 595\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept) 6.288711   0.017731  354.68\ncollege     0.353487   0.033183   10.65\nt0          0.096933   0.001189   81.51\n\nCorrelation of Fixed Effects:\n        (Intr) colleg\ncollege -0.513       \nt0      -0.201  0.000\n```\n\n\n:::\n\n```{.r .cell-code}\nggpredict(mod1, terms = c(\"t0 [all]\", \"id [sample = 9]\"), type = \"random\") |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggpredict(mod2, terms = c(\"t0 [all]\", \"id [sample = 9]\"), type = \"random\") |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggpredict(mod3, terms = c(\"t0 [all]\", \"id [sample = 9]\"), type = \"random\") |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](solutions10_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "solutions10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}